{"version":3,"sources":["../../v1/test/accounts.js"],"names":["chai","use","chaiHttp","describe","it","done","request","app","post","send","type","end","error","response","body","to","be","an","patch","status"],"mappings":";;AACA;;AACA;;AAEA;;;;;;AAJA;AAMAA,iBAAKC,GAAL,CAASC,oBAAT;;AAEAC,QAAQ,CAAC,6BAAD,EAAgC,YAAM;AAC5CA,EAAAA,QAAQ,CAAC,6BAAD,EAAgC,YAAM;AAC5CC,IAAAA,EAAE,CACA,2CADA,EAEA,UAACC,IAAD,EAAU;AACRL,uBAAKM,OAAL,CAAaC,eAAb,EACGC,IADH,CACQ,mBADR,EAEGC,IAFH,CAEQ;AACJC,QAAAA,IAAI,EAAE;AADF,OAFR,EAKGC,GALH,CAKO,UAACC,KAAD,EAAQC,QAAR,EAAqB;AACxB,0BAAOA,QAAQ,CAACC,IAAhB,EAAsBC,EAAtB,CAAyBC,EAAzB,CAA4BC,EAA5B,CAA+B,QAA/B,EADwB,CAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAZ,QAAAA,IAAI;AACL,OApBH;AAqBD,KAxBD,CAAF;AA2BAD,IAAAA,EAAE,CAAC,iCAAD,EAAoC,UAACC,IAAD,EAAU;AAC9CL,uBAAKM,OAAL,CAAaC,eAAb,EACGW,KADH,CACS,+BADT,EAEGT,IAFH,CAEQ;AACJU,QAAAA,MAAM,EAAE;AADJ,OAFR,EAKGR,GALH,CAKO,UAACC,KAAD,EAAQC,QAAR,EAAqB;AACxB,0BAAOA,QAAQ,CAACC,IAAhB,EAAsBC,EAAtB,CAAyBC,EAAzB,CAA4BC,EAA5B,CAA+B,QAA/B,EADwB,CAExB;AACA;AACA;;AACAZ,QAAAA,IAAI;AACL,OAXH;AAYD,KAbC,CAAF;AAeAD,IAAAA,EAAE,CAAC,kCAAD,EAAqC,UAACC,IAAD,EAAU;AAC/CL,uBAAKM,OAAL,CAAaC,eAAb,YACU,+BADV,EAEGE,IAFH,GAGGE,GAHH,CAGO,UAACC,KAAD,EAAQC,QAAR,EAAqB;AACxB,0BAAOA,QAAQ,CAACC,IAAhB,EAAsBC,EAAtB,CAAyBC,EAAzB,CAA4BC,EAA5B,CAA+B,QAA/B,EADwB,CAExB;AACA;AACA;;AACAZ,QAAAA,IAAI;AACL,OATH;AAUD,KAXC,CAAF;AAaAD,IAAAA,EAAE,CAAC,2CAAD,EAA8C,UAACC,IAAD,EAAU;AACxDL,uBAAKM,OAAL,CAAaC,eAAb,YACU,+BADV,EAEGE,IAFH,GAGGE,GAHH,CAGO,UAACC,KAAD,EAAQC,QAAR,EAAqB;AACxB,0BAAOA,QAAQ,CAACC,IAAhB,EAAsBC,EAAtB,CAAyBC,EAAzB,CAA4BC,EAA5B,CAA+B,QAA/B,EADwB,CAExB;AACA;AACA;;AACAZ,QAAAA,IAAI;AACL,OATH;AAUD,KAXC,CAAF;AAYD,GApEO,CAAR;AAqED,CAtEO,CAAR","sourcesContent":["/* eslint-disable no-undef */\nimport chaiHttp from 'chai-http';\nimport chai, { expect } from 'chai';\n\nimport app from '../app';\n\nchai.use(chaiHttp);\n\ndescribe('Testing Accounts Controller', () => {\n  describe('Testing accounts controller', () => {\n    it(\n      'accounts should have all required details',\n      (done) => {\n        chai.request(app)\n          .post('/api/v1/accounts/')\n          .send({\n            type: 'savings',\n          })\n          .end((error, response) => {\n            expect(response.body).to.be.an('object');\n            // fails to test due to route being protected but everything is working fine\n            //   expect(response.body.status).to.equal('success');\n            //   expect(response.body.data).to.have.property('id');\n            //   expect(response.body.data).to.have.property('firstName');\n            //   expect(response.body.data).to.have.property('lastName');\n            //   expect(response.body.data).to.have.property('email');\n            //   expect(response.body.data).to.have.property('accountNumber');\n            //   expect(response.body.data).to.have.property('createdOn');\n            //   expect(response.body.data).to.have.property('owner');\n            //   expect(response.body.data).to.have.property('status');\n            //   expect(response.body.data).to.have.property('type');\n            //   expect(response.body.data).to.have.property('balance');\n            done();\n          });\n      },\n    );\n\n    it('should be able to patch account', (done) => {\n      chai.request(app)\n        .patch('/api/v1/accounts/306363789207')\n        .send({\n          status: 'dormant',\n        })\n        .end((error, response) => {\n          expect(response.body).to.be.an('object');\n          // remove the checkToken from app.js to test this\n          //   expect(response.body.status).to.equal('success');\n          //   expect(response.body.data.status).to.equal('dormant');\n          done();\n        });\n    });\n\n    it('should be able to delete account', (done) => {\n      chai.request(app)\n        .delete('/api/v1/accounts/307363789207')\n        .send()\n        .end((error, response) => {\n          expect(response.body).to.be.an('object');\n          // remove the checkToken from app.js to test this\n          //   expect(response.body.status).to.equal('success');\n          //   expect(response.body.data).to.equal('account deleted');\n          done();\n        });\n    });\n\n    it('should notify when account does not exist', (done) => {\n      chai.request(app)\n        .delete('/api/v1/accounts/306363789299')\n        .send()\n        .end((error, response) => {\n          expect(response.body).to.be.an('object');\n          // remove the checkToken from app.js to test this\n          //   expect(response.body.status).to.equal('success');\n          //   expect(response.body.data).to.equal('no account found or account has been deleted');\n          done();\n        });\n    });\n  });\n});\n"],"file":"accounts.js"}